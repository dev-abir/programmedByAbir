#define NUMBER_OF_CELLS_ALONG_ROW 100
#define NUMBER_OF_CELLS_ALONG_COLUMN NUMBER_OF_CELLS_ALONG_ROW
#define LENGTH_OF_EACH_CELL (WIDTH / NUMBER_OF_CELLS_ALONG_ROW)
#define ALIVE true
#define DEAD false


//In SFML, (0, 0) is the top-left corner of the window.

//Global vars:
sf::RectangleShape cells[NUMBER_OF_CELLS_ALONG_ROW][NUMBER_OF_CELLS_ALONG_COLUMN];
bool aliveOrDead[NUMBER_OF_CELLS_ALONG_ROW][NUMBER_OF_CELLS_ALONG_COLUMN];
int initialAliveX[4];    //The initial alive aliveOrDead depends WIDTH constant.
int initialAliveY[4];    //The initial alive aliveOrDead depends WIDTH constant.

//Some functions:
void initaliveOrDead()
{
    initialAliveX[2] = initialAliveX[0] = (NUMBER_OF_CELLS_ALONG_ROW % 2 == 0) ? (NUMBER_OF_CELLS_ALONG_ROW / 2) : ((NUMBER_OF_CELLS_ALONG_ROW - 1) / 2);
    initialAliveX[3] = initialAliveX[1] = initialAliveX[0] + 1;

    initialAliveY[1] = initialAliveY[0] = (NUMBER_OF_CELLS_ALONG_COLUMN % 2 == 0) ? (NUMBER_OF_CELLS_ALONG_COLUMN / 2) : ((NUMBER_OF_CELLS_ALONG_COLUMN - 1) / 2);
    initialAliveY[3] = initialAliveY[2] = initialAliveY[0] + 1;

    int i, j;

    for(i=0;i<NUMBER_OF_CELLS_ALONG_ROW;i++)
    {
        for(j=0;j<NUMBER_OF_CELLS_ALONG_COLUMN;j++)
        {
            cells[i][j] = sf::RectangleShape(sf::Vector2f(LENGTH_OF_EACH_CELL, LENGTH_OF_EACH_CELL));
            cells[i][j].setPosition(sf::Vector2f(LENGTH_OF_EACH_CELL * i, LENGTH_OF_EACH_CELL * j));
            //aliveOrDead[i][j].setOutlineThickness(1.0f);
            //aliveOrDead[i][j].setOutlineColor(sf::Color::Green);
            aliveOrDead[i][j] = DEAD;
        }
    }

    for(i=0;i<4;i++)
    {
        aliveOrDead[initialAliveX[i]][initialAliveY[i]] = ALIVE;
    }
}

int getNoOfLiveCellsNearby(int posX, int posY)
{
    int result = 0;

        //In Slick library, (0, 0) is the top-left corner.

        if(posX == 0){
            if(posY == 0){
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY + 1]){
                    result = result + 1;
                }
            }
            else if(posY == (NUMBER_OF_CELLS_ALONG_COLUMN - 1)){
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY - 1]){
                    result = result + 1;
                }
            }
            else{
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY - 1]){
                    result = result + 1;
                }
            }
        }



        else if(posY == 0){
            //if(posX == 0){}  //no need to check that (posX == 0), I have checked it earlier, i.e., if
                                    //(posX == 0) and (posY == 0)
            if(posX == (NUMBER_OF_CELLS_ALONG_ROW - 1)){
                if(aliveOrDead[posX - 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY + 1]){
                    result = result + 1;
                }
            }
            else{
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY + 1]){
                    result = result + 1;
                }
            }
        }


        else if(posX == (NUMBER_OF_CELLS_ALONG_ROW - 1)){
            //if(posY == 0){}  //no need to check that (posY == 0), I have checked it earlier, i.e., if
                                    //(posY == 0) and (posX == (NUMBER_OF_CELLS_ALONG_ROW - 1))
            if(posY == (NUMBER_OF_CELLS_ALONG_COLUMN - 1)){
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY - 1]){
                    result = result + 1;
                }
            }
            else{
                if(aliveOrDead[posX - 1][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY + 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY + 1]){
                    result = result + 1;
                }
            }
        }


        else if(posY == (NUMBER_OF_CELLS_ALONG_COLUMN - 1)){
            //if(posX == 0){}  //no need to check that (posX == 0), I have checked it earlier, i.e., if
                                    //(posX == 0) and (posY == (nC - 1))
            if(posX == (NUMBER_OF_CELLS_ALONG_ROW - 1)){
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY + 1]){
                    result = result + 1;
                }
            }
            else{
                if(aliveOrDead[posX + 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY]){
                    result = result + 1;
                }
                if(aliveOrDead[posX][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX - 1][posY - 1]){
                    result = result + 1;
                }
                if(aliveOrDead[posX + 1][posY - 1]){
                    result = result + 1;
                }
            }
        }


        else{
            if(aliveOrDead[posX + 1][posY]){
                result = result + 1;
            }
            if(aliveOrDead[posX - 1][posY]){
                result = result + 1;
            }
            if(aliveOrDead[posX][posY + 1]){
                result = result + 1;
            }
            if(aliveOrDead[posX][posY - 1]){
                result = result + 1;
            }
            if(aliveOrDead[posX + 1][posY - 1]){
                result = result + 1;
            }
            if(aliveOrDead[posX - 1][posY - 1]){
                result = result + 1;
            }
            if(aliveOrDead[posX - 1][posY + 1]){
                result = result + 1;
            }
            if(aliveOrDead[posX + 1][posY + 1]){
                result = result + 1;
            }
        }
        return result;
//    int result = 0;
//
//    if(posX == 0)
//    {
//        if(posY == 0)
//        {
//            if(aliveOrDead[posX + 1][posY] == ALIVE)
//            {
//                result = result + 1;
//            }
//            if(aliveOrDead[posX][posY + 1] == ALIVE)
//            {
//                result = result + 1;
//            }
//        }
//        else
//        {
//            if(posY == (NUMBER_OF_aliveOrDead_ALONG_COLUMN - 1))
//            {
//                if(aliveOrDead[posX + 1][posY] == ALIVE)
//                {
//                    result = result + 1;
//                }
//                if(aliveOrDead[posX][posY - 1] == ALIVE)
//                {
//                    result = result + 1;
//                }
//            }
//            else
//            {
//                if(aliveOrDead[posX + 1][posY] == ALIVE)
//                {
//                    result = result + 1;
//                }
//                if(aliveOrDead[posX][posY - 1] == ALIVE)
//                {
//                    result = result + 1;
//                }
//                if(aliveOrDead[posX][posY + 1] == ALIVE)
//                {
//                    result = result + 1;
//                }
//            }
//        }
//    }
//    else if(posY == 0)
//    {
//        //no need to check that (posX == 0), I have checked it earlier, i.e., if
//        //(posX == 0) and (posY == 0)
//        if(posX == (NUMBER_OF_aliveOrDead_ALONG_ROW - 1))
//        {
//            if(aliveOrDead[posX][posY + 1] == ALIVE)
//            {
//                result = result + 1;
//            }
//            if(aliveOrDead[posX - 1][posY] == ALIVE)
//            {
//                result = result + 1;
//            }
//        }
//        else
//        {
//            if(aliveOrDead[posX][posY + 1] == ALIVE)
//            {
//                result = result + 1;
//            }
//            if(aliveOrDead[posX - 1][posY] == ALIVE)
//            {
//                result = result + 1;
//            }
//            if(aliveOrDead[posX + 1][posY] == ALIVE)
//            {
//                result = result + 1;
//            }
//        }
//    }
//    else
//    {
//        if(aliveOrDead[posX + 1][posY] == ALIVE)
//        {
//            result = result + 1;
//        }
//        if(aliveOrDead[posX - 1][posY] == ALIVE)
//        {
//            result = result + 1;
//        }
//        if(aliveOrDead[posX][posY + 1] == ALIVE)
//        {
//            result = result + 1;
//        }
//        if(aliveOrDead[posX][posY - 1] == ALIVE)
//        {
//            result = result + 1;
//        }
//    }
//    return result;
}

void updateCells()
{


    //TODO : I will do it later...


    int i, j;
    for(i=0;i<NUMBER_OF_CELLS_ALONG_ROW;i++)
    {
        for(j=0;j<NUMBER_OF_CELLS_ALONG_COLUMN;j++)
        {
            if(aliveOrDead[i][j] == ALIVE)
            {
                if((getNoOfLiveCellsNearby(i, j) < 2) || (getNoOfLiveCellsNearby(i, j) > 3))
                {
                    aliveOrDead[i][j] = DEAD;
                }
                else
                {
                    aliveOrDead[i][j] = ALIVE;
                }
            }
            else    //  If the cell is dead
            {
                if(getNoOfLiveCellsNearby(i, j) == 3)
                {
                    aliveOrDead[i][j] = ALIVE;
                }
            }
        }
    }
}

void drawCells(sf::RenderWindow* window)
{
    int i, j;
    for(i=0;i<NUMBER_OF_CELLS_ALONG_ROW;i++)
    {
        for(j=0;j<NUMBER_OF_CELLS_ALONG_COLUMN;j++)
        {
            if(aliveOrDead[i][j] == ALIVE)
            {
                cells[i][j].setFillColor(sf::Color::Red);
                window->draw(cells[i][j]);
            }
        }
    }
}
